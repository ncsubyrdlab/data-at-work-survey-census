---
title: "Data at Work: Building Insights from Survey and Census Data Part II"
author: "Jeanne McClure and Christy Byrd"
date: today 
format:
  html:
    toc: true
    toc-depth: 4
    toc-location: right
theme:
  light: simplex
  dark: cyborg
editor: visual
---

## Introduction

### Census from web:

[Census.gov](https://www.census.gov/data.html) is a comprehensive platform providing access to the vast array of data collected by the U.S. Census Bureau. This web-based tool allows users to conduct searches or browse data sets related to population, housing, income, and more. Detailed demographic, geographic, and economic statistics are available, which are crucial for various research and policy-making purposes.

To get to the web version click on <https://data.census.gov/all>, start by utilizing the search bar to enter specific terms or browse through the provided filters to narrow down the data by topics, geographies, or survey types.

### Census from R

#### Getting Started with Census API Key

Census API key with the census_api_key() function. API keys can be obtained at <https://api.census.gov/data/key_signup.html>. After you've signed up for an API key, be sure to activate the key from the email you receive from the Census Bureau so it works correctly.

Without an API key, the access to the Census Bureau's data is significantly limited. Users without a key can still make requests, but they are subject to a lower rate limit of up to 500 calls per day.

## How to: Engage with Census Data using R

**Guiding Question:** What types of filters would you apply to find data about your own community?

### Setting Up R Environment

Load the Libraries

First, ensure that the required libraries are installed and loaded. We'll use `tidycensus` for accessing Census data and `tidyverse` for data manipulation and visualization.

```{r}
# Check if the tidycensus package is installed. If not, install it.
if (!require(tidycensus)) {
    install.packages("tidycensus", dependencies = TRUE)
}

# Check if the tidyverse package is installed. If not, install it.
if (!require(tidyverse)) {
    install.packages("tidyverse", dependencies = TRUE)
}

# Load the packages
library(tidycensus)
library(tidyverse)
```

### Accessing Census Data Types:

-   `get_decennial()`, accesses decennial Census data.

-   `get_acs()`, retrieves American Community Survey data.

-   `get_estimates()`, pulls population estimates.

-   `get_pums()`, detatiled microdata from the Public use microdata sample.

-   `get_flows()`, analyzes migration flows between geographies.

## Decennial Census

**Decennial Census**, which is used to access decennial Census data from the 2000, 2010, and 2020 decennial US Censuses.

Decennial Census:

-   2000, 2010, and 2020 Census data available via the API

-   Use get_decennial() function in tidycensus

**Guiding Question for get_decennial():** How has the population in North Carolina changed from 2000 to 2020 according to the decennial censuses?

```{r}
total_population_10 <- get_decennial(
  geography = "state", 
  variables = "P001001",
  year = 2010)

total_population_10
```

#### **ðŸ‘‰ 1. Your Turn** **â¤µ**

-   Change the geography from "state" to "county" and observe the population differences at a more localized level.

```{r}

#ADD Code Below

```

## American Community Survey

ACS includes a wide variety of variables detailing characteristics of the US population not found in the decennial Census.

-   **ACS 1-Year Estimates**: Available for populations of 65,000+. Use the `get_acs()` function.
-   **ACS 1-Year Public Use Microdata Sample (PUMS) File**: Retrieve detailed microdata using the `get_pums()` function.
-   **ACS 5-Year Estimates**: Available for all population sizes. Use the `get_acs()` function.
-   **ACS 5-Year PUMS File**: Retrieve microdata using the `get_pums()` function.

#### Sex by age by state

The American Community Survey provides detailed statistics like sex by age.

[**https://api.census.gov/data/2020/acs/acs5/groups/B19013.html**](https://api.census.gov/data/2019/acs/acs5/groups/B19013.html)

```{r}
#sex by age
age_table <- get_acs(
  geography = "state", 
  table = "B01001",
  cache_table = TRUE,
  year = 2022
)

age_table
```

The `MOE` variable you're seeing stands for "Margin of Error." It is commonly included in datasets retrieved from the American Community Survey (ACS) provided by the U.S. Census Bureau. The Margin of Error is a statistical measure that provides an estimate of the possible variance in the data, indicating the confidence interval within which the actual values may vary.

#### **ðŸ‘‰ 2. Your Turn** **â¤µ**

Modify the above `get_acs()` call to retrieve data for a specific state of choice.

```{r}
#ADD CODE BELOW


```

#### Foreign born population - Mexico

For data related to the population by place of birth, you can use Table **B05006**, which provides data on "Place of Birth for the Foreign-Born Population in the United States." The specific variable code for Mexican-born individuals would use `B05006_013`, which specifically categorizes people born in Mexico.

<https://api.census.gov/data/2019/acs/acs5/groups.html>

```{r}
# Pull data for the Mexican-born population in each state
mexican_born <- get_acs(
  geography = "state",
  variables = "B05006_013",  # Variable for people born in Mexico
  year = 2020,
  survey = "acs5" # Use 5-year estimates for broader coverage
)

# View the data
print(mexican_born)


```

#### Median Income by County

We will examine the median household income across counties in North Carolina to understand economic disparities.

Guiding Question: How do economic conditions vary across different counties in North Carolina, and what factors might contribute to these variations? How does Johnston County compare to the state average in terms of median household income?

<https://en.wikipedia.org/wiki/Federal_Information_Processing_Standard_state_code#FIPS_state_codes>

```{r}
nc_income <- get_acs(
  geography = "county", 
  variables = "B19013_001", 
  state = "37",
  year = 2020
)

nc_income %>%
  arrange(desc(estimate))
  
```

```{r}
#filter by county
nc_income %>%
  filter(NAME == "Johnston County, North Carolina")
```

#### **ðŸ‘‰ 3. Your Turn** **â¤µ**

Filter the data for a different county and compare it to Johnston County.

```{r}
#ADD CODE BELOW


```

### Recoding

We can categorize the median household income data into specific groups. This recoding process helps simplify the data, making it easier to visualize and understand the economic brackets prevalent across North Carolina counties. By dividing the income data into meaningful categories, we can better assess the economic status of different regions and tailor our analysis to address specific socioeconomic questions.

We'll use the mutate() function from the dplyr package to create a new variable called income_group within our `nc_income` dataframe. This variable will classify each county's median household income into one of four predefined groups:

-   `below35k`: Represents counties where the median household income is less than \$35,000.
-   `bw35kand75k`: For counties with a median income between \$35,000 and \$74,999.
-   `75kand150k`: Categorizes counties with a median income between \$75,000 and \$149,999.
-   `above150k`: Includes counties where the median income is \$150,000 or more.

```{r}
  
nc_income_bygroup <- nc_income %>%
  mutate(
    income_group = case_when(
      estimate < 35000  ~ "below35k",
      estimate < 75000  ~ "bw35kand75k",
      estimate < 150000 ~ "75kand150k",
      TRUE              ~ "above150k"
    )
  )

nc_income_bygroup
```

#### **ðŸ‘‰ 4. Your Turn** **â¤µ**

Adjust the income brackets to define new categories that fit your research needs.

```{r}
#ADD CODE BELOW


```

### Public Use Microdata Sample (PUMS)

PUMS data allows for custom tabulations.

```{r}
pums_data <- get_pums(
  variables = c("AGEP", "SEX", "RAC1P"),
  state = "NC",
  survey = "acs5",
  year = 2021
)

head(pums_data)
```

#### **ðŸ‘‰ 5. Your Turn** **â¤µ**

Change the variables argument to include other characteristics such as education or income.

```{r}
#ADD CODE BELOW


```

### Migration Flows

Analyze migration flows using `get_flows()`.

```{r}
NC_migration <- get_flows(
  geography = "county",
  state = "NC",
  county = "Wake",
  year = 2022
)

head(NC_migration )
```

#### **ðŸ‘‰ 6. Your Turn** **â¤µ**

Modify the code to analyze migration flows between other states.

```{r}
#ADD CODE BELOW


```

## Wrangling Census data

Previously we examined the median household income across counties in North Carolina to understand economic disparities.

**Guiding Question:** How do economic conditions vary across different counties in North Carolina, and what factors might contribute to these variations?

Let's dive deeper into a specific county in North Carolina---Wake County.

### By County

```{r}
wake_income <- get_acs(
  geography = "tract", 
  variables = "B19013_001", 
  state = "37",
  county = "183", 
  year = 2022
)

wake_income %>%
  arrange(estimate)

```

ðŸ¤” Who is the estimated income for census tract 511.02? You can use resources like [Census Reporter](https://censusreporter.org/profiles/14000US37183051102-census-tract-51102-wake-nc/) to explore this further.

#### **ðŸ‘‰ 7. Your Turn** **â¤µ**

Identify another census tract in Wake County and compare its income estimates.

```{r}
#ADD CODE BELOW IF YOU WANT OR JUST SERACH


```

### Total income by state

We can also aggregate data by state to see overall income distribution.

```{r}
hhinc <- get_acs(
  geography = "state", 
  table = "B19001", 
  survey = "acs1",
  cache_table = TRUE,
  year = 2022
)

hhinc
```

You can retrieve data in a "wide" format to make comparisons across different variables more accessible.

```{r}
hhinc_wide <- get_acs(
  geography = "state", 
  table = "B19001", 
  survey = "acs1", 
  year = 2023,
  output = "wide"
)

hhinc_wide
```

### Renaming Variable

We can rename variables for easier identification and analysis.

```{r}
nc <- get_acs(
  geography = "county",
  state = "North Carolina",
  variables = c(medinc = "B19013_001",
                medage = "B01002_001"),
  output = "wide",
  year = 2022
)

nc
```

#### **ðŸ‘‰ 8. Your Turn** **â¤µ**

-   Change the `nc` df to see how presenting data in wide format helps in analysis. Call the new object `nc_wide`

```{r}

```

### `get_estimate()` function

The `get_estimates()` function provides population estimates.

```{r}
wake_components <- get_estimates(
  geography = "county",
  product = "components",
  state = "37",
  county = "183",
  year = 2022
)

wake_components
```

We can also break down data by additional characteristics.

```{r}
North_carolina_sex_hisp <- get_estimates(
  geography = "state",
  product = "characteristics",
  breakdown = c("SEX", "HISP"),
  breakdown_labels = TRUE,
  state = "NC",
  year = 2022
)

North_carolina_sex_hisp
```

### **Separating Variables**

Sometimes, we may need to separate a column into multiple parts. For example, separating county and state information from the `NAME` column using the `separate()` function.

```{r}
nc %>%
  separate(
    col = NAME,              # Column to separate
    into = c("county", "state"),  # Names of the new columns
    sep = ", "               # Separator pattern
  )
```

### Normalizing variables

To better understand the distribution of different racial groups, we normalize the counts to percentages.

```{r}
race_vars <- c(
  White = "B03002_003",
  Black = "B03002_004",
  Native = "B03002_005",
  Asian = "B03002_006",
  HIPI = "B03002_007",
  Hispanic = "B03002_012"
)

nc_race <- get_acs(
  geography = "county",
  state = "NC",
  variables = race_vars,
  summary_var = "B03002_001",
  year = 2022
) 

nc_race
```

### Use tidyverse to find percentage

```{r}
nc_race_percent <- nc_race %>%
  mutate(percent = 100 * (estimate / summary_est)) %>%
  select(NAME, variable, percent)

nc_race_percent
```

### Largest and Smallest Groups by County

We can also determine the largest and smallest racial groups by county.

```{r}
largest_group <- nc_race_percent %>%
  group_by(NAME) %>%
  filter(percent == max(percent))

largest_group

smallest_group <- nc_race_percent %>%
  group_by(NAME) %>%
  filter(percent == min(percent))

smallest_group
```

## Visualizing Census data

We'll explore how to use `ggplot2` to visualize the Census data we've worked with so far. Visualization is a powerful way to make sense of complex data, and ggplot2 offers an easy and customizable way to create plots in R.

### Setting Options for Plotting

The optional call to `options(scipen = 999)` instructs R to avoid using scientific notation in its output, including on the **ggplot2** tick labels.

```{r}
options(scipen = 999)
```

### Histogram

We'll start by creating a histogram to understand the distribution of median household incomes across different counties.

```{r}
nc_wide_viz <- nc %>%
    separate(
    col = NAME,             
    into = c("county", "state"),  
    sep = ", "             
  )

ggplot(nc_wide_viz, aes(x = medincE)) +
  geom_histogram(bins = 30)
```

This histogram provides a visual overview of the median household income distribution in North Carolina counties. The `bins` parameter controls the number of bins in the histogram, allowing us to adjust the granularity of the distribution.

#### **ðŸ‘‰ 9. Your Turn** **â¤µ**

Adjust the `bins` parameter to see how it affects the histogram's appearance. Experiment with different bin sizes.

```{r}
#ADD CODE BELOW


```

### Boxplot

Next, let's create a boxplot to understand the spread and identify any potential outliers in median income.

```{r}
ggplot(nc_wide_viz, aes(y = medincE)) +
  geom_boxplot()
```

The boxplot is useful for visualizing the range, quartiles, and outliers for the median income data. This plot helps identify the variability in median income across counties.

#### **ðŸ‘‰ 9. Your Turn** **â¤µ**

Try adding another variable to the boxplot, such as coloring by region or grouping by another factor.

```{r}
#ADD CODE BELOW


```

### Scatter Plot with Linear Fit

Let's create a scatter plot to explore the relationship between median income and median age.

```{r}
ggplot(nc_wide_viz, aes(x = medageE, y = medincE)) +
  geom_point()
```

This scatter plot allows us to see if there is any correlation between median age and median income in North Carolina counties. Each point represents a county.

Now, let's add a trend line to better understand the relationship between these two variables.

```{r}
ggplot(nc_wide_viz, aes(x = medageE, y = medincE)) +
  geom_point() +
  geom_smooth(method = "lm")
```

Adding a linear model (`geom_smooth(method = "lm")`) helps to visualize any potential trend or relationship between median age and median income. The slope of the line can provide insights into how these two variables relate to each other.

But, now i'd like to see by sex. I will first get those variables and reqwite my variable `nc`

```{r}
nc_wide <- get_acs(
  geography = "county",
  state = "North Carolina",
  variables = c(medinc = "B19013_001",
                medage = "B01002_001",
                male = "B01001_002",    # Male population variable
                female = "B01001_026"), # Female population variable
  output = "wide",
  year = 2022
)

#inspect object
nc_wide
```

```{r}

ggplot(nc_wide, aes(x = medageE, y = medincE, color = factor(ifelse(maleE > femaleE, "Male Majority", "Female Majority")))) +
  geom_point() +
  geom_jitter(width = 0.5, height = 0, size = 2) +  # Adding jitter to spread points slightly
  geom_smooth(method = "lm") +
  labs(
    title = "Relationship between Median Age and Median Income by Sex Majority",
    x = "Median Age",
    y = "Median Income",
    color = "Sex Majority"
  ) +
  theme_classic()

```

#### **ðŸ‘‰ 10. Your Turn** **â¤µ**

Change the `method` argument to explore different types of trend lines, such as `"loess"` for a non-linear fit.

```{r}
ADD CODE BELOW

```

### Advanced GGPlot: Interactive Plots with Plotly

To make our visualizations interactive, we can use the `plotly` package. This allows us to transform our ggplot graphs into interactive visualizations that users can explore.

First, install and load the [`plotly` package](https://plotly.com/r/) if you haven't already:

```{r}
if (!require(plotly)) {
    install.packages("plotly")
}

library(plotly)
```

Let's make our scatter plot interactive:

```{r}
plot <- ggplot(nc_wide_viz, aes(x = medageE, y = medincE)) +
  geom_point() +
  geom_smooth(method = "lm")

ggplotly(plot)
```

The `ggplotly()` function converts a ggplot object into an interactive plot. Users can hover over points to see detailed information, zoom in on specific areas, and pan across the plot. This interactivity can make data exploration more engaging and insightful.

We can do it with the previous LM plot as well:

```{r}
plot <- ggplot(nc_wide, aes(x = medageE, y = medincE, color = factor(ifelse(maleE > femaleE, "Male Majority", "Female Majority")))) +
  geom_point() +
  geom_smooth(method = "lm") +  # Linear model fit
  labs(
    title = "Relationship between Median Age and Median Income by Sex Majority",
    x = "Median Age",
    y = "Median Income",
    color = "Sex Majority"
  ) +
  theme_classic()

# Convert the ggplot to an interactive plotly plot
ggplotly(plot)
```

#### **ðŸ‘‰ 11. Your Turn** **â¤µ**

Try creating an interactive version of the boxplot or histogram using `ggplotly()`.

```{r}
#ADD CODE BELOW


```

### Beeswarm Plot for Enhanced Data Visualization

Another interesting way to visualize distributions is by using a [beeswarm plot](https://r-graph-gallery.com/beeswarm.html), which can help to show individual data points without too much overlap.

First, install and load the `beeswarm` package:

```{r}
if (!require(beeswarm)) {
    install.packages("beeswarm")
}

library(beeswarm)
```

Create a beeswarm plot:

```{r}
beeswarm(medincE ~ state, data = nc_wide_viz, pch = 16, col = "blue")
```

The beeswarm plot provides a clear view of the distribution of data points, making it easier to see where values cluster and how they spread out. This visualization is particularly useful for showing all individual data points, rather than just summary statistics.

#### **ðŸ‘‰ 12. Your Turn** **â¤µ**

Experiment with different `pch` values (plotting symbols) and colors to customize the appearance of the beeswarm plot.

```{r}
#ADD CODE BELOW


```

## Weights

In both the American Community Survey (ACS) and the Public Use Microdata Sample (PUMS), weights are used to ensure that the sample data accurately represent the full population. Here's an overview of the key types of weights used in these datasets:

### 1. **Person Weights** (`PWGTP`)

-   **Purpose**: Person weights adjust the individual responses in the PUMS dataset so they represent the actual population in the full ACS sample.

-   **Use Case**: When analyzing individual-level data (such as age, gender, employment), the person weight is applied to ensure that the results reflect the characteristics of the entire population.

-   **Variables**:

    -   `PWGTP`: Person weight.

    -   `PWGTP1-PWGTP80`: Replicate weights for variance estimation.

### 2. **Housing Unit Weights** (`WGTP`)

-   **Purpose**: These weights adjust housing unit responses to ensure they represent all housing units in the U.S.

-   **Use Case**: Applied when analyzing household or housing unit data (such as household income, house size, rent), making sure that the findings can be generalized to the total population of housing units.

-   **Variables**:

    -   `WGTP`: Housing unit weight.

    -   `WGTP1-WGTP80`: Replicate weights for variance estimation.

### 3. **Replicate Weights** (`PWGTP1-80`, `WGTP1-80`)

-   **Purpose**: These weights are used for variance estimation. They allow users to measure the reliability and precision of their estimates by using a method known as the "balanced repeated replication" (BRR).

-   **Use Case**: Replicate weights are primarily useful in calculating margins of error and confidence intervals when working with the ACS and PUMS data.

In summary:

-   **Person weights** are used when the unit of analysis is an individual.

-   **Housing unit weights** are used when analyzing household or housing unit characteristics.

-   **Replicate weights** help in estimating the variance and ensuring reliable statistical inference.

## More on weights:

### 1. **Base Weight Calculation**

-   This is the initial weight assigned to each individual or household in the sample, reflecting the probability of selection.

Base Weight = 1 / Probability of Selection

$$ \text{Base Weight} = \frac{1}{\text{Probability of Selection}} $$

-   This calculation accounts for the sampling design, which varies by region, population size, and other factors, making some individuals more likely to be selected than others.

### 2. **Nonresponse Adjustment**

-   The nonresponse adjustment compensates for individuals or households who were selected for the survey but did not respond.

-   The Census Bureau adjusts the weights of respondents so that they represent both the people who did respond and those who didn't. This is done within specific groups (adjustment cells) based on demographics or geography.

-   **Nonresponse Adjustment Formula**: Nonresponse Adjustment Factor = Total Sample in

Adjustment Cell / Responding Sample in Adjustment Cell

$$ \text{Nonresponse Adjustment Factor} = \frac{\text{Total Sample in Adjustment Cell}}{\text{Responding Sample in Adjustment Cell}} $$

Nonresponse Adjustment Factor = Responding Sample in Adjustment Cell / Total Sample in Adjustment Cell

$$ \text{Nonresponse Adjustment Factor} = \frac{\text{Responding Sample in Adjustment Cell}}{\text{Total Sample in Adjustment Cell}} $$

-   The nonresponse-adjusted weight is calculated by multiplying the base weight by the nonresponse adjustment factor.

### 3. **Post-Stratification to Population Controls**

-   After adjusting for nonresponse, the Census Bureau ensures that the survey data align with independent population estimates for various demographic groups (such as age, sex, race, and geographic region). These control totals are derived from sources like the decennial census or population projections.

-   **Post-Stratification Adjustment Formula**:

Post-Stratification Factor = Control Population / Weighted Survey Population for Group

$$ \text{Post-Stratification Factor} = \frac{\text{Control Population}}{\text{Weighted Survey Population for Group}} $$

-   This adjustment aligns the weighted survey data with known population totals for certain key characteristics.

### 4. **Weight Trimming (if necessary)**

-   To prevent extreme weights from unduly influencing the results, the Census Bureau may trim or cap the largest weights. Weights that exceed a certain threshold are reduced, and the excess weight is redistributed among other cases within the same adjustment group.

-   This step helps to ensure that no single respondent disproportionately affects the results.

### 5. **Replicate Weights for Variance Estimation**

-   The Census Bureau provides **replicate weights** to enable accurate estimation of the variance, standard errors, and confidence intervals. These replicate weights are calculated using methods like **Balanced Repeated Replication (BRR)** or **Fay's method**.

-   **Replicate Weights Calculation**: The original weights are systematically perturbed to create multiple sets of replicate weights, which can be used to calculate the variance of any estimate.

-   For each replicate, the Census Bureau slightly modifies the sample by removing or down-weighting some observations, recalculates the weights, and repeats the process multiple times to create the final replicate weights.

### Pre-Calculated Weights in ACS and PUMS:

-   The **person weight (`PWGTP`)** and the **housing unit weight (`WGTP`)** are the pre-calculated weights included in the PUMS data files.

-   When using ACS or PUMS data, you need to apply the appropriate weight (person or housing) to ensure that the results represent the entire population. The weight essentially tells you how many people or housing units in the population are represented by each individual or housing unit in the sample.

### Example Calculation of Weighted Estimates:

Once the weights are pre-calculated and included in the dataset, users apply these weights in their analyses to get representative estimates. For example, when calculating a population estimate for a variable like income, you would use the following formula:

Weighted Estimate = Î£(i=1 to n) (X~i~ Ã— Weight~i~)

$$ \text{Weighted Estimate} = \sum_{i=1}^{n} \left( X_i \times \text{Weight}_i \right) $$

Where:

-   **X~i~** is the value of the variable for the *i-th* person or household (e.g., income level).
-   **Weight~i~** is the weight assigned to the *i-th* person or household (e.g., `PWGTP` or `WGTP`).
-   ***n*** is the number of individuals or housing units in the sample.

### How to Use the Weights:

1.  **Person-level analyses**: Use the person weight (`PWGTP`) for estimates involving individual-level variables, such as employment status, age, or education.

2.  **Household-level analyses**: Use the housing unit weight (`WGTP`) for estimates involving household characteristics, such as housing costs or household size.

For **variance estimation**, you would also need to use the replicate weights (`PWGTP1-PWGTP80` or `WGTP1-WGTP80`) to calculate the standard errors or confidence intervals around your estimates.

## Resources

Resources compiled for our workshop by Census program analyst, Sam Payton. Also would like to thank Cenus.gov analysts

**API Resources:**

[[https://www.census.gov/data/developers.html]{.underline}](https://www.census.gov/data/developers.html) - Main API Developers page

[[https://api.census.gov/data/key_signup.html]{.underline}](https://api.census.gov/data/key_signup.html) - API Key Signup

[[https://www.census.gov/data/what-is-data-census-gov/guidance-for-data-users/how-to-materials-for-using-the-census-api.html]{.underline}](https://www.census.gov/data/what-is-data-census-gov/guidance-for-data-users/how-to-materials-for-using-the-census-api.html) - API How to materials (mostly browser based)

**tidycensus Resources:**

[[https://www.census.gov/data/academy/courses/intro-to-the-census-bureau-data-api.html#3]{.underline}](https://www.census.gov/data/academy/courses/intro-to-the-census-bureau-data-api.html#3) -- How to use API in R (tidycensus examples)

[[https://walker-data.com/tidycensus/]{.underline}](https://walker-data.com/tidycensus/) - Main Tidycensus site

[[https://walker-data.com/census-r/index.html]{.underline}](https://walker-data.com/census-r/index.html) - Analyzing US Census Data Book by Kyle Walker

[[https://walker-data.com/tidycensus/articles/basic-usage.html]{.underline}](https://walker-data.com/tidycensus/articles/basic-usage.html)- Basic Usage of Tidycensus

[[https://walker-data.com/tidycensus/articles/pums-data.html]{.underline}](https://walker-data.com/tidycensus/articles/pums-data.html) - Working with Census microdata

[**Data.census.gov**](http://data.census.gov/) **Resources:**

[[https://www.census.gov/data/what-is-data-census-gov.html]{.underline}](https://www.census.gov/data/what-is-data-census-gov.html)

[[https://www.census.gov/data/what-is-data-census-gov/guidance-for-data-users/how-to-materials-for-using-data-census-gov.html]{.underline}](https://www.census.gov/data/what-is-data-census-gov/guidance-for-data-users/how-to-materials-for-using-data-census-gov.html)

**ACS Resources:**

[[https://www.census.gov/programs-surveys/acs]{.underline}](https://www.census.gov/programs-surveys/acs) - Main ACS site

[[https://www.census.gov/programs-surveys/acs/microdata.html]{.underline}](https://www.census.gov/programs-surveys/acs/microdata.html) - ACS PUMS resources

County Business Patterns:

-   [[https://api.census.gov/data/2022/cbp.html]{.underline}](https://api.census.gov/data/2022/cbp.html)

-   Not available in tidycensus

Annual Business Survey -- Characteristics of Business Owners:

-   [[https://api.census.gov/data/2021/abscbo.html]{.underline}](https://api.census.gov/data/2021/abscbo.html)

-   Not available in tidycensus

2017/2022 Economic Census:

-   [[https://api.census.gov/data/2017/ecn.html]{.underline}](https://api.census.gov/data/2017/ecn.html)

-   [[https://api.census.gov/data/2022/ecn.html]{.underline}](https://api.census.gov/data/2022/ecn.html)

-   Not available in tidycensus

International Trade:

-   [[https://api.census.gov/data/timeseries/intltrade.html]{.underline}](https://api.census.gov/data/timeseries/intltrade.html)

-   Not available in tidycensus

Time Series Economic Indicators:

-   [[https://api.census.gov/data/timeseries/eits.html]{.underline}](https://api.census.gov/data/timeseries/eits.html)

-   Not available in tidycensus
